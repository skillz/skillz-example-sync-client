// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MatchSuccess : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MatchSuccess GetRootAsMatchSuccess(ByteBuffer _bb) { return GetRootAsMatchSuccess(_bb, new MatchSuccess()); }
  public static MatchSuccess GetRootAsMatchSuccess(ByteBuffer _bb, MatchSuccess obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MatchSuccess __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Opcode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)6; } }
  public string RegisteredMatchId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegisteredMatchIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRegisteredMatchIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRegisteredMatchIdArray() { return __p.__vector_as_array<byte>(6); }
  public int TickRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long OpponentUserId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ServerVersion { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServerVersionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetServerVersionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetServerVersionArray() { return __p.__vector_as_array<byte>(12); }
  public short ServerVersionCode { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<MatchSuccess> CreateMatchSuccess(FlatBufferBuilder builder,
      short opcode = 6,
      StringOffset registeredMatchIdOffset = default(StringOffset),
      int tick_rate = 0,
      long opponentUserId = 0,
      StringOffset serverVersionOffset = default(StringOffset),
      short serverVersionCode = 0) {
    builder.StartTable(6);
    MatchSuccess.AddOpponentUserId(builder, opponentUserId);
    MatchSuccess.AddServerVersion(builder, serverVersionOffset);
    MatchSuccess.AddTickRate(builder, tick_rate);
    MatchSuccess.AddRegisteredMatchId(builder, registeredMatchIdOffset);
    MatchSuccess.AddServerVersionCode(builder, serverVersionCode);
    MatchSuccess.AddOpcode(builder, opcode);
    return MatchSuccess.EndMatchSuccess(builder);
  }

  public static void StartMatchSuccess(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddOpcode(FlatBufferBuilder builder, short opcode) { builder.AddShort(0, opcode, 6); }
  public static void AddRegisteredMatchId(FlatBufferBuilder builder, StringOffset registeredMatchIdOffset) { builder.AddOffset(1, registeredMatchIdOffset.Value, 0); }
  public static void AddTickRate(FlatBufferBuilder builder, int tickRate) { builder.AddInt(2, tickRate, 0); }
  public static void AddOpponentUserId(FlatBufferBuilder builder, long opponentUserId) { builder.AddLong(3, opponentUserId, 0); }
  public static void AddServerVersion(FlatBufferBuilder builder, StringOffset serverVersionOffset) { builder.AddOffset(4, serverVersionOffset.Value, 0); }
  public static void AddServerVersionCode(FlatBufferBuilder builder, short serverVersionCode) { builder.AddShort(5, serverVersionCode, 0); }
  public static Offset<MatchSuccess> EndMatchSuccess(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MatchSuccess>(o);
  }
};

