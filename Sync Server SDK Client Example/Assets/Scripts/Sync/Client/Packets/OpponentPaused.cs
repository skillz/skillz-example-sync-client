// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OpponentPaused : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OpponentPaused GetRootAsOpponentPaused(ByteBuffer _bb) { return GetRootAsOpponentPaused(_bb, new OpponentPaused()); }
  public static OpponentPaused GetRootAsOpponentPaused(ByteBuffer _bb, OpponentPaused obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OpponentPaused __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Opcode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)7; } }
  public short TimeRemaining { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<OpponentPaused> CreateOpponentPaused(FlatBufferBuilder builder,
      short opcode = 7,
      short timeRemaining = 0) {
    builder.StartTable(2);
    OpponentPaused.AddTimeRemaining(builder, timeRemaining);
    OpponentPaused.AddOpcode(builder, opcode);
    return OpponentPaused.EndOpponentPaused(builder);
  }

  public static void StartOpponentPaused(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOpcode(FlatBufferBuilder builder, short opcode) { builder.AddShort(0, opcode, 7); }
  public static void AddTimeRemaining(FlatBufferBuilder builder, short timeRemaining) { builder.AddShort(1, timeRemaining, 0); }
  public static Offset<OpponentPaused> EndOpponentPaused(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OpponentPaused>(o);
  }
};

