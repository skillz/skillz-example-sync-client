// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Connect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Connect GetRootAsConnect(ByteBuffer _bb) { return GetRootAsConnect(_bb, new Connect()); }
  public static Connect GetRootAsConnect(ByteBuffer _bb, Connect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Connect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Opcode { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)1; } }
  public long UserId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string MatchId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatchIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMatchIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMatchIdArray() { return __p.__vector_as_array<byte>(8); }
  public string ExternalToken { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalTokenBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExternalTokenBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExternalTokenArray() { return __p.__vector_as_array<byte>(10); }
  public string ClientVersion { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientVersionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetClientVersionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetClientVersionArray() { return __p.__vector_as_array<byte>(12); }
  public short ClientCode { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short ClientPlatform { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public bool Reconnecting { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Connect> CreateConnect(FlatBufferBuilder builder,
      short opcode = 1,
      long userId = 0,
      StringOffset matchIdOffset = default(StringOffset),
      StringOffset externalTokenOffset = default(StringOffset),
      StringOffset clientVersionOffset = default(StringOffset),
      short clientCode = 0,
      short clientPlatform = 0,
      bool reconnecting = false) {
    builder.StartTable(8);
    Connect.AddUserId(builder, userId);
    Connect.AddClientVersion(builder, clientVersionOffset);
    Connect.AddExternalToken(builder, externalTokenOffset);
    Connect.AddMatchId(builder, matchIdOffset);
    Connect.AddClientPlatform(builder, clientPlatform);
    Connect.AddClientCode(builder, clientCode);
    Connect.AddOpcode(builder, opcode);
    Connect.AddReconnecting(builder, reconnecting);
    return Connect.EndConnect(builder);
  }

  public static void StartConnect(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddOpcode(FlatBufferBuilder builder, short opcode) { builder.AddShort(0, opcode, 1); }
  public static void AddUserId(FlatBufferBuilder builder, long userId) { builder.AddLong(1, userId, 0); }
  public static void AddMatchId(FlatBufferBuilder builder, StringOffset matchIdOffset) { builder.AddOffset(2, matchIdOffset.Value, 0); }
  public static void AddExternalToken(FlatBufferBuilder builder, StringOffset externalTokenOffset) { builder.AddOffset(3, externalTokenOffset.Value, 0); }
  public static void AddClientVersion(FlatBufferBuilder builder, StringOffset clientVersionOffset) { builder.AddOffset(4, clientVersionOffset.Value, 0); }
  public static void AddClientCode(FlatBufferBuilder builder, short clientCode) { builder.AddShort(5, clientCode, 0); }
  public static void AddClientPlatform(FlatBufferBuilder builder, short clientPlatform) { builder.AddShort(6, clientPlatform, 0); }
  public static void AddReconnecting(FlatBufferBuilder builder, bool reconnecting) { builder.AddBool(7, reconnecting, false); }
  public static Offset<Connect> EndConnect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Connect>(o);
  }
};

